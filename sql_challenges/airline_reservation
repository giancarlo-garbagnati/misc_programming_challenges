/* Not my solution to the CodeSignal SQL practice test (from 2024), just posting it here so I can save it and study from it */

-- INIT database
CREATE TABLE seats (
  seat_no INT AUTO_INCREMENT KEY,
  status INT,
  person_id INT
);

CREATE TABLE requests (
  request_id INT AUTO_INCREMENT KEY,
  request INT,
  seat_no INT,
  person_id INT
);

INSERT INTO seats (seat_no, status, person_id) VALUES
(1, 2, 1),
(2, 1, 2),
(3, 0, 0),
(4, 2, 3),
(5, 0, 0),
(6, 0, 0),
(7, 2, 1),
(8, 1, 31),
(9, 2, 81),
(10, 2, 10);

INSERT INTO requests (request_id, request, seat_no, person_id) VALUES
(1, 1, 3, 4),
(2, 2, 2, 5),
(3, 2, 1, 1),
(4, 1, 9, 81),
(5, 2, 10, 10),
(6, 1, 3, 59);

/* INSERT INTO seats (status, person_id)
VALUES
	(1, 1),
    (1, 2),
    (0, 0),
    (2, 3),
    (0, 0);

INSERT INTO requests (request, seat_no, person_id)
VALUES
	(1,3,4),
    (2,2,5),
    (2,1,1); */
      
-- QUERY database
/*
seat_no	status	person_id
1	1	1
2	1	2
3	0	0
4	2	3
5	0	0
and requests

request_id	request	seat_no	person_id
1	1	3	4
2	2	2	5
3	2	1	1

OUTPUT
seat_no	status	person_id
1	2	1
2	1	2
3	1	4
4	2	3
5	0	0 */
/* Your task is to return the table seats after the given requests have been performed. */
/* SELECT * FROM requests; */

/* SELECT s.seat_no, s.status, s.person_id, r.person_id as "requester", r.request_id, r.request
FROM seats s
LEFT JOIN requests r ON s.seat_no = r.seat_no; */

/* SELECT
    s.seat_no,
    CASE
        WHEN r.request = 1 AND s.status = 0 THEN 1 -- Reserve the seat if it is free
        WHEN r.request = 2 AND s.status = 1 AND s.person_id = r.person_id THEN 2 -- Purchase the seat if it is reserved by the same person
        ELSE s.status -- No change in status
    END AS status,
    CASE
        WHEN r.request = 1 AND s.status = 0 THEN r.person_id -- Assign person_id if reserving the seat
        WHEN r.request = 2 AND s.status = 1 AND s.person_id = r.person_id THEN r.person_id -- Retain person_id if purchasing the seat
        ELSE s.person_id -- No change in person_id
    END AS person_id
FROM seats s
LEFT JOIN requests r
ON s.seat_no = r.seat_no
 */


WITH person_request AS
(
    SELECT
   		person_id,
    	max(request) AS max_request
    FROM requests
    GROUP BY person_id
),
first_request AS
(
    SELECT
  		c.*,
    	MIN(c.request_id) OVER (PARITION BY c.seat_no) AS first_request_id
    FROM
    (
        SELECT a.*, b.max_request 
        FROM requests AS a
        JOIN person_request AS b ON a.person_id = b.person_id
    ) AS c
    WHERE c.max_request = c.request
),
seat_reservation AS
(
    SELECT
       a.seat_no,
       a.status,
       a.person_id AS base_person_id,
       COALESCE(b.max_request,0) AS request,
       COALESCE(b.person_id,0) AS request_person_id,
       COALESCE(b.request_id,0) AS request_id
    FROM seats AS a
    LEFT JOIN first_request AS b 
    ON a.seat_no = b.seat_no AND b.first_request_id = b.request_id
),
base AS
(
    SELECT
    c.seat_no,
    CASE
    	WHEN c.status = 0 AND c.request > 0
    		THEN c.request
    	WHEN c.status = 1 AND c.base_person_id = c.request_person_id
    		THEN c.request
    	WHEN c.status = 2
    		THEN c.status
    	ELSE c.status 
    END AS status,
    CASE 
    	WHEN c.status = 0 and c.request > 0
    		THEN c.request_person_id
    	WHEN c.status = 1 and c.base_person_id = c.request_person_id
    		THEN c.request_person_id
    	WHEN c.status = 2
    		THEN c.base_person_id
    	ELSE c.base_person_id 
    END AS person_id
    FROM seat_reservation AS c
)
SELECT * FROM base;

/* MIN(butt_size) OVER (PARTITION BY b.row) as "smallest butt per row" */

/*SELECT
   		person_id,
    	max(request) AS max_request
    FROM requests
       GROUP BY person_id; 

WITH person_request AS
(
    SELECT
   		person_id,
    	max(request) AS max_request
    FROM requests
    GROUP BY person_id 
), */

SELECT c.*,
    MIN(c.request_id) OVER (partition by c.seat_no) AS first_request_id
    FROM
    (
        SELECT a.*, b.max_request 
        FROM requests AS a
        JOIN (
          SELECT
              person_id,
              max(request) AS max_request
          FROM requests
             GROUP BY person_id
        ) AS b ON a.person_id = b.person_id
    ) AS c
    WHERE c.max_request = c.request;


SELECT
     a.seat_no,
     a.status,
     a.person_id AS base_person_id,
     COALESCE(b.max_request,0) AS request,
     COALESCE(b.person_id,0) AS request_person_id,
     COALESCE(b.request_id,0) AS request_id
  FROM seats AS a
  LEFT JOIN (
      SELECT c.*,
        MIN(c.request_id) OVER (PARTITION by c.seat_no) AS first_request_id
        FROM
        (
            SELECT a.*, b.max_request 
            FROM requests AS a
            JOIN (
              SELECT
                  person_id,
                  max(request) AS max_request
              FROM requests
                 GROUP BY person_id
            ) AS b ON a.person_id = b.person_id
        ) AS c
        WHERE c.max_request = c.request
  ) AS b 
  ON a.seat_no = b.seat_no AND b.first_request_id = b.request_id;
